<?php

namespace CodePress\CodeCategory\Tests\Models;

use CodePress\CodeCategory\Models\Category;
use CodePress\CodeCategory\Tests\AbstractTestCase;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Support\MessageBag;
use Mockery as m;

class CategoryTest extends AbstractTestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->migrate();
    }

    public function test_inject_validator_in_category_model()
    {
        $category = new Category();
        $validator = m::mock(Validator::class);
        $category->setValidator($validator);

        $this->assertEquals($category->getValidator(), $validator);
    }

    public function test_should_check_if_it_is_valid_when_it_is()
    {
        $category = new Category();
        $category->name = 'Category Test';

        $validator = m::mock(Validator::class);
        $validator->shouldReceive('setRules')->with(array('name' => 'required|max:255', 'active' => 'boolean'));
        $validator->shouldReceive('setData')->with(array('name' => 'Category Test'));
        $validator->shouldReceive('fails')->andReturn(false);

        $category->setValidator($validator);

        $this->assertTrue($category->isValid());
    }

    public function test_should_check_if_it_is_invalid_when_it_is()
    {
        $category = new Category();
        $category->name = 'Category Test';

        $messageBag = m::mock(MessageBag::class);

        $validator = m::mock(Validator::class);
        $validator->shouldReceive('setRules')->with(array('name' => 'required|max:255', 'active' => 'boolean'));
        $validator->shouldReceive('setData')->with(array('name' => 'Category Test'));
        $validator->shouldReceive('fails')->andReturn(true);
        $validator->shouldReceive('errors')->andReturn($messageBag);

        $category->setValidator($validator);

        $this->assertFalse($category->isValid());
        $this->assertEquals($messageBag, $category->errors);
    }

    public function test_check_if_a_category_can_be_persisted()
    {
        $category = Category::create(array(
            'name' => 'Category Test',
            'active' => true
        ));
        $this->assertEquals('Category Test', $category->name);

        $category = Category::all()->first();
        $this->assertEquals('Category Test', $category->name);
    }

    public function test_check_if_can_assign_a_parent_to_a_category()
    {
        $parentCategory = Category::create(array(
            'name' => 'Parent Test',
            'active' => true
        ));

        $childCategory = Category::create(array(
            'name' => 'Child Test',
            'active' => true
        ));

        $childCategory->parent()->associate($parentCategory)->save();

        $child = $parentCategory->categories()->first();

        $this->assertEquals('Child Test', $child->name);
        $this->assertEquals('Parent Test', $childCategory->parent->name);
    }

    public function test_check_if_a_category_will_deleted()
    {
        Category::create(array(
            'name' => 'Category Test',
            'active' => true
        ));

        $child = Category::all()->last();
        $this->assertEquals('Category Test', $child->name);

        $child->delete();
        $childDeleted = Category::all()->last();
        $this->assertEquals(null, $childDeleted);
    }

    public function test_check_if_a_category_will_updated()
    {
        Category::create(array(
            'name' => 'Category Test',
            'active' => true
        ));

        $child = Category::all()->last();
        $this->assertEquals('Category Test', $child->name);

        $child->name = 'Category Updated Test';
        $child->save();

        $childUpdated = Category::all()->last();
        $this->assertEquals('Category Updated Test', $childUpdated->name);

    }
}

